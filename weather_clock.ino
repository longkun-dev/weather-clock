#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <NTPClient.h>
#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include <string.h>
#include <stdlib.h>
#include <ArduinoJson.h>

// WiFi设置
const char *ssid = "ChinaNet-zLHq";
const char *password = "mpvmqq6q";

// 心知天气API调用信息
const char *weatherAPIHost = "api.seniverse.com";
const int weatherAPIPort = 80;
String weatherAPIKey = "SfseLC-bjJwi7WOE4";
String weatherLocation = "shenzhen";

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

#define OLED_RESET -1       // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
WiFiClient wifiClient;
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP);

// ℃
const unsigned char degree[] = {
    0x60, 0x00, 0x91, 0xf4, 0x96, 0x0c, 0x6c, 0x04, 0x08, 0x04, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00,
    0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x08, 0x00, 0x0c, 0x04, 0x06, 0x08, 0x01, 0xf0, 0x00, 0x00};
// 晴
const unsigned char qing[] = {
    0x00, 0x20, 0x00, 0x20, 0x7b, 0xfe, 0x48, 0x20, 0x49, 0xfc, 0x48, 0x20, 0x4b, 0xfe, 0x78, 0x00,
    0x49, 0xfc, 0x49, 0x04, 0x49, 0xfc, 0x49, 0x04, 0x79, 0xfc, 0x49, 0x04, 0x01, 0x14, 0x01, 0x08};
// 多
static const unsigned char duo[] = {
    0x02, 0x00, 0x02, 0x00, 0x07, 0xf0, 0x08, 0x20, 0x38, 0x40, 0x04, 0x80, 0x03, 0x40, 0x0c, 0x80,
    0x71, 0xf8, 0x02, 0x08, 0x0c, 0x10, 0x32, 0x20, 0x01, 0x40, 0x01, 0x80, 0x0e, 0x00, 0x70, 0x00};
// 云
static const unsigned char yun[] = {
    0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x02, 0x00,
    0x04, 0x00, 0x04, 0x00, 0x08, 0x40, 0x10, 0x20, 0x20, 0x10, 0x7f, 0xf8, 0x20, 0x08, 0x00, 0x08};
// 少
static const unsigned char shao[] = {
    0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x09, 0x20, 0x09, 0x10, 0x11, 0x08, 0x11, 0x04, 0x21, 0x14,
    0x41, 0x10, 0x01, 0x20, 0x00, 0x40, 0x00, 0x80, 0x01, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x70, 0x00};
// 间
static const unsigned char jian[] = {
    0x20, 0x00, 0x13, 0xfc, 0x10, 0x04, 0x40, 0x04, 0x47, 0xc4, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
    0x47, 0xc4, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x47, 0xc4, 0x40, 0x04, 0x40, 0x14, 0x40, 0x08};
// 阴
static const unsigned char yin[] = {
    0x00, 0x00, 0x7d, 0xfc, 0x45, 0x04, 0x49, 0x04, 0x49, 0x04, 0x51, 0xfc, 0x49, 0x04, 0x49, 0x04,
    0x45, 0x04, 0x45, 0xfc, 0x45, 0x04, 0x69, 0x04, 0x52, 0x04, 0x42, 0x04, 0x44, 0x14, 0x48, 0x08};
// 阵
static const unsigned char zhen[] = {
    0x00, 0x40, 0x7c, 0x40, 0x44, 0x40, 0x4b, 0xfe, 0x48, 0x80, 0x50, 0xa0, 0x49, 0x20, 0x49, 0xfc,
    0x44, 0x20, 0x44, 0x20, 0x44, 0x20, 0x6b, 0xfe, 0x50, 0x20, 0x40, 0x20, 0x40, 0x20, 0x40, 0x20};
// 雨
static const unsigned char yu[] = {
    0x00, 0x00, 0xff, 0xfe, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x7f, 0xfc, 0x41, 0x04, 0x41, 0x04,
    0x49, 0x44, 0x45, 0x24, 0x41, 0x04, 0x49, 0x44, 0x45, 0x24, 0x41, 0x04, 0x41, 0x14, 0x40, 0x08};
// 强
static const unsigned char qiang[] = {
    0x00, 0x00, 0xf9, 0xfc, 0x09, 0x04, 0x09, 0x04, 0x09, 0xfc, 0x78, 0x20, 0x40, 0x20, 0x43, 0xfe,
    0x42, 0x22, 0x7a, 0x22, 0x0b, 0xfe, 0x08, 0x20, 0x08, 0x24, 0x08, 0x22, 0x57, 0xfe, 0x20, 0x02};
// 雷
static const unsigned char lei[] = {
    0x00, 0x00, 0x3f, 0xf8, 0x01, 0x00, 0x7f, 0xfe, 0x41, 0x02, 0x9d, 0x74, 0x01, 0x00, 0x1d, 0x70,
    0x00, 0x00, 0x3f, 0xf8, 0x21, 0x08, 0x21, 0x08, 0x3f, 0xf8, 0x21, 0x08, 0x21, 0x08, 0x3f, 0xf8};
// 伴
static const unsigned char ban[] = {
    0x08, 0x40, 0x0a, 0x44, 0x09, 0x48, 0x11, 0x50, 0x10, 0x40, 0x37, 0xfc, 0x30, 0x40, 0x50, 0x40,
    0x90, 0x40, 0x1f, 0xfe, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0x10, 0x40};
// 有
static const unsigned char you[] = {
    0x02, 0x00, 0x02, 0x00, 0xff, 0xfe, 0x04, 0x00, 0x04, 0x00, 0x0f, 0xf0, 0x08, 0x10, 0x18, 0x10,
    0x2f, 0xf0, 0x48, 0x10, 0x88, 0x10, 0x0f, 0xf0, 0x08, 0x10, 0x08, 0x10, 0x08, 0x50, 0x08, 0x20};
// 冰
static const unsigned char bing[] = {
    0x00, 0x40, 0x40, 0x40, 0x20, 0x40, 0x20, 0x44, 0x00, 0x68, 0x07, 0x70, 0x11, 0x60, 0x11, 0x50,
    0x21, 0x50, 0xe2, 0x48, 0x22, 0x48, 0x24, 0x44, 0x28, 0x42, 0x20, 0x40, 0x21, 0x40, 0x00, 0x80};
// 雹
static const unsigned char bao[] = {
    0x3f, 0xf8, 0x01, 0x00, 0x7f, 0xfe, 0x41, 0x02, 0x9d, 0x74, 0x01, 0x00, 0x1d, 0x70, 0x08, 0x00,
    0x1f, 0xf0, 0x20, 0x10, 0x5f, 0x90, 0x10, 0x90, 0x1f, 0xd0, 0x10, 0x20, 0x10, 0x04, 0x0f, 0xfc};
// 小
static const unsigned char xiao[] = {
    0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x11, 0x10, 0x11, 0x08, 0x11, 0x04,
    0x21, 0x04, 0x21, 0x02, 0x41, 0x02, 0x81, 0x02, 0x01, 0x00, 0x01, 0x00, 0x05, 0x00, 0x02, 0x00};
// 中
static const unsigned char zhong[] = {
    0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x3f, 0xf8, 0x21, 0x08, 0x21, 0x08, 0x21, 0x08,
    0x21, 0x08, 0x21, 0x08, 0x3f, 0xf8, 0x21, 0x08, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00};
// 大
static const unsigned char da[] = {
    0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xff, 0xfe, 0x01, 0x00, 0x01, 0x00,
    0x02, 0x80, 0x02, 0x80, 0x04, 0x40, 0x04, 0x40, 0x08, 0x20, 0x10, 0x10, 0x20, 0x08, 0xc0, 0x06};
// 部
static const unsigned char bu[] = {
    0x10, 0x00, 0x08, 0x3e, 0x7f, 0xa2, 0x00, 0x24, 0x21, 0x24, 0x12, 0x28, 0xff, 0xe4, 0x00, 0x24, 
    0x00, 0x22, 0x3f, 0x22, 0x21, 0x22, 0x21, 0x34, 0x21, 0x28, 0x3f, 0x20, 0x21, 0x20, 0x00, 0x20};
// 极
static const unsigned char ji[] = {
    0x10, 0x00, 0x13, 0xfc, 0x10, 0x84, 0x10, 0x88, 0xfc, 0x88, 0x10, 0x90, 0x30, 0x9c, 0x38, 0x84,
    0x55, 0x44, 0x55, 0x44, 0x91, 0x28, 0x11, 0x28, 0x12, 0x10, 0x12, 0x28, 0x14, 0x44, 0x11, 0x82};
// 端
static const unsigned char duan[] = {
    0x20, 0x20, 0x11, 0x24, 0x11, 0x24, 0xfd, 0x24, 0x01, 0xfc, 0x08, 0x00, 0x8b, 0xfe, 0x88, 0x20,
    0x48, 0x40, 0x49, 0xfc, 0x51, 0x54, 0x51, 0x54, 0x1d, 0x54, 0xe1, 0x54, 0x41, 0x54, 0x01, 0x0c};
// 降
static const unsigned char jiang[] = {
    0x00, 0x80, 0x7c, 0x80, 0x44, 0xfc, 0x49, 0x08, 0x4a, 0x90, 0x50, 0x60, 0x49, 0x98, 0x4e, 0x26,
    0x44, 0x20, 0x45, 0xfc, 0x44, 0x20, 0x6a, 0x20, 0x53, 0xfe, 0x40, 0x20, 0x40, 0x20, 0x40, 0x20};
// 暴
static const unsigned char bao1[] = {
    0x1f, 0xf0, 0x10, 0x10, 0x1f, 0xf0, 0x10, 0x10, 0x1f, 0xf0, 0x08, 0x20, 0x7f, 0xfc, 0x08, 0x20,
    0xff, 0xfe, 0x08, 0x20, 0x31, 0x18, 0xc9, 0x26, 0x05, 0x40, 0x09, 0x20, 0x15, 0x10, 0x22, 0x08};
// 特
static const unsigned char te[] = {
    0x10, 0x20, 0x10, 0x20, 0x50, 0x20, 0x51, 0xfc, 0x7c, 0x20, 0x50, 0x20, 0x93, 0xfe, 0x10, 0x08,
    0x1c, 0x08, 0xf1, 0xfe, 0x50, 0x08, 0x10, 0x88, 0x10, 0x48, 0x10, 0x08, 0x10, 0x28, 0x10, 0x10};
// 冻
static const unsigned char dong[] = {
    0x00, 0x40, 0x40, 0x40, 0x20, 0x40, 0x27, 0xfe, 0x00, 0x80, 0x09, 0x20, 0x09, 0x20, 0x12, 0x20,
    0x13, 0xfc, 0xe0, 0x20, 0x21, 0x28, 0x21, 0x24, 0x22, 0x22, 0x24, 0x22, 0x20, 0xa0, 0x00, 0x40};
// 到
static const unsigned char dao[] = {
    0x00, 0x04, 0xff, 0x84, 0x08, 0x04, 0x10, 0x24, 0x22, 0x24, 0x41, 0x24, 0xff, 0xa4, 0x08, 0xa4,
    0x08, 0x24, 0x08, 0x24, 0x7f, 0x24, 0x08, 0x24, 0x08, 0x04, 0x0f, 0x84, 0xf8, 0x14, 0x40, 0x08};
// 雪
static const unsigned char xue[] = {
    0x3f, 0xf8, 0x01, 0x00, 0x7f, 0xfe, 0x41, 0x02, 0x9d, 0x74, 0x01, 0x00, 0x1d, 0x70, 0x00, 0x00,
    0x3f, 0xf8, 0x00, 0x08, 0x00, 0x08, 0x1f, 0xf8, 0x00, 0x08, 0x00, 0x08, 0x3f, 0xf8, 0x00, 0x08};
// 夹
static const unsigned char jia[] = {
    0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x7f, 0xfc, 0x01, 0x00, 0x11, 0x10, 0x09, 0x20, 0x01, 0x00,
    0xff, 0xfe, 0x01, 0x00, 0x02, 0x80, 0x02, 0x80, 0x04, 0x40, 0x08, 0x20, 0x30, 0x18, 0xc0, 0x06};
// 天
static const unsigned char tian[] = {
    0x00, 0x00, 0x3f, 0xf8, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xff, 0xfe, 0x01, 0x00,
    0x02, 0x80, 0x02, 0x80, 0x04, 0x40, 0x04, 0x40, 0x08, 0x20, 0x10, 0x10, 0x20, 0x08, 0xc0, 0x06};
// 气
static const unsigned char qi[] = {
    0x10, 0x00, 0x10, 0x00, 0x3f, 0xfc, 0x20, 0x00, 0x4f, 0xf0, 0x80, 0x00, 0x3f, 0xf0, 0x00, 0x10,
    0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x06, 0x00, 0x02};
// 薄
static const unsigned char bo[] = {
    0x08, 0x20, 0xff, 0xfe, 0x08, 0x20, 0x00, 0x48, 0x27, 0xfc, 0x10, 0x40, 0x13, 0xf8, 0x82, 0x48,
    0x43, 0xf8, 0x4a, 0x48, 0x0b, 0xf8, 0x12, 0x48, 0xf0, 0x10, 0x27, 0xfc, 0x22, 0x10, 0x21, 0x30};
// 雾
static const unsigned char wu[] = {
    0x3f, 0xf8, 0x01, 0x00, 0x7f, 0xfe, 0x41, 0x02, 0x9d, 0x74, 0x01, 0x00, 0x1d, 0x70, 0x04, 0x00,
    0x0f, 0xe0, 0x14, 0x40, 0x03, 0x80, 0x1c, 0x70, 0xe2, 0x0e, 0x0f, 0xe0, 0x04, 0x20, 0x18, 0x60};
// 霾
static const unsigned char mai[] = {
    0x3f, 0xf8, 0x01, 0x00, 0x7f, 0xfe, 0x41, 0x02, 0x9d, 0x74, 0x30, 0x00, 0xcb, 0xfc, 0x2d, 0x24, 
    0x31, 0xfc, 0xc9, 0x24, 0x15, 0xfc, 0x64, 0x20, 0x0d, 0xfc, 0x34, 0x20, 0xc5, 0xfe, 0x18, 0x00};
// 风
static const unsigned char feng[] = {
    0x00, 0x00, 0x3f, 0xf0, 0x20, 0x10, 0x20, 0x10, 0x28, 0x50, 0x24, 0x50, 0x22, 0x90, 0x22, 0x90, 
    0x21, 0x10, 0x21, 0x10, 0x22, 0x90, 0x22, 0x92, 0x24, 0x4a, 0x48, 0x4a, 0x40, 0x06, 0x80, 0x02};
// 龙
static const unsigned char long1[] = {
    0x04, 0x20, 0x04, 0x10, 0x04, 0x10, 0x04, 0x00, 0xff, 0xfe, 0x04, 0x80, 0x04, 0x88, 0x04, 0x88, 
    0x04, 0x90, 0x08, 0xa0, 0x08, 0xc0, 0x10, 0x82, 0x11, 0x82, 0x22, 0x82, 0x44, 0x7e, 0x80, 0x00};
// 卷
static const unsigned char juan[] = {
    0x01, 0x00, 0x11, 0x10, 0x09, 0x20, 0x3f, 0xf8, 0x02, 0x00, 0x02, 0x00, 0x7f, 0xfc, 0x08, 0x20, 
    0x10, 0x10, 0x2f, 0xe8, 0xc8, 0x26, 0x08, 0x20, 0x08, 0xa8, 0x08, 0x48, 0x08, 0x08, 0x07, 0xf8};
// 飓
static const unsigned char ju[] = {
    0x00, 0x00, 0x7c, 0xf8, 0x44, 0x88, 0x44, 0xf8, 0x44, 0x88, 0x4c, 0xf8, 0x6c, 0x88, 0x54, 0xf8, 
    0x54, 0x88, 0x55, 0xfc, 0x6c, 0x00, 0x44, 0x50, 0x44, 0x88, 0x42, 0x02, 0x41, 0xfe, 0x80, 0x00};
// 带
static const unsigned char dai[] = {
    0x09, 0x20, 0x09, 0x20, 0x7f, 0xfc, 0x09, 0x20, 0x09, 0x20, 0x00, 0x00, 0x7f, 0xfe, 0x41, 0x02, 
    0x81, 0x04, 0x1f, 0xf0, 0x11, 0x10, 0x11, 0x10, 0x11, 0x50, 0x11, 0x20, 0x01, 0x00, 0x01, 0x00};
// 浮
static const unsigned char fu[] = {
    0x00, 0x08, 0x20, 0x3c, 0x13, 0xc0, 0x10, 0x04, 0x82, 0x44, 0x41, 0x28, 0x48, 0x00, 0x0b, 0xf8,
    0x10, 0x10, 0x10, 0x20, 0xe7, 0xfe, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xa0, 0x00, 0x40};
// 尘
static const unsigned char chen[] = {
    0x01, 0x00, 0x01, 0x00, 0x09, 0x20, 0x09, 0x10, 0x11, 0x08, 0x21, 0x04, 0x41, 0x04, 0x00, 0x00,
    0x01, 0x00, 0x01, 0x00, 0x3f, 0xf8, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xff, 0xfe, 0x00, 0x00};
// 浓
static const unsigned char nong[] = {
    0x00, 0x40, 0x20, 0x40, 0x10, 0x40, 0x17, 0xfc, 0x84, 0x84, 0x48, 0x88, 0x41, 0x40, 0x11, 0x44,
    0x13, 0x48, 0x25, 0x30, 0xe9, 0x20, 0x21, 0x10, 0x21, 0x08, 0x21, 0x44, 0x21, 0x82, 0x01, 0x00};
// 度
static const unsigned char du[] = {
    0x01, 0x00, 0x00, 0x80, 0x3f, 0xfe, 0x22, 0x20, 0x22, 0x20, 0x3f, 0xfc, 0x22, 0x20, 0x22, 0x20,
    0x23, 0xe0, 0x20, 0x00, 0x2f, 0xf0, 0x24, 0x10, 0x42, 0x20, 0x41, 0xc0, 0x86, 0x30, 0x38, 0x0e};
// 重
static const unsigned char zhong1[] = {
    0x00, 0x10, 0x00, 0xf8, 0x3f, 0x00, 0x01, 0x00, 0xff, 0xfe, 0x01, 0x00, 0x1f, 0xf0, 0x11, 0x10,
    0x1f, 0xf0, 0x11, 0x10, 0x1f, 0xf0, 0x01, 0x00, 0x3f, 0xf8, 0x01, 0x00, 0xff, 0xfe, 0x00, 0x00};
// 严
static const unsigned char yan[] = {
    0x00, 0x00, 0x7f, 0xfc, 0x02, 0x40, 0x12, 0x48, 0x0a, 0x50, 0x02, 0x40, 0x3f, 0xfe, 0x20, 0x00,
    0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x40, 0x00, 0x40, 0x00, 0x80, 0x00};
// 热
static const unsigned char re[] = {
    0x10, 0x40, 0x10, 0x40, 0x10, 0x40, 0xfd, 0xf8, 0x10, 0x48, 0x10, 0x48, 0x1c, 0xc8, 0x30, 0x48,
    0xd0, 0xaa, 0x10, 0xaa, 0x51, 0x06, 0x22, 0x02, 0x00, 0x00, 0x48, 0x88, 0x44, 0x44, 0x84, 0x44};
// 冷
static const unsigned char leng[] = {
    0x00, 0x40, 0x40, 0x40, 0x20, 0xa0, 0x20, 0xa0, 0x01, 0x10, 0x02, 0x48, 0x14, 0x26, 0x10, 0x20,
    0x23, 0xf8, 0xe0, 0x08, 0x20, 0x10, 0x21, 0x10, 0x20, 0xa0, 0x20, 0x40, 0x20, 0x20, 0x00, 0x20};
// 未
static const unsigned char wei[] = {
    0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x3f, 0xf8, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xff, 0xfe,
    0x03, 0x80, 0x05, 0x40, 0x09, 0x20, 0x11, 0x10, 0x21, 0x08, 0xc1, 0x06, 0x01, 0x00, 0x01, 0x00};
// 知
static const unsigned char zhi[] = {
    0x20, 0x00, 0x20, 0x00, 0x20, 0x7c, 0x7e, 0x44, 0x48, 0x44, 0x88, 0x44, 0x08, 0x44, 0x08, 0x44,
    0xff, 0x44, 0x08, 0x44, 0x14, 0x44, 0x14, 0x44, 0x22, 0x7c, 0x22, 0x44, 0x42, 0x00, 0x80, 0x00};
// 扬
static const unsigned char yang[] = {
    0x10, 0x00, 0x11, 0xf8, 0x10, 0x10, 0x10, 0x20, 0xfc, 0x40, 0x10, 0x80, 0x11, 0xfe, 0x14, 0x92, 
    0x18, 0x92, 0x30, 0x92, 0xd1, 0x12, 0x11, 0x22, 0x12, 0x22, 0x14, 0x42, 0x50, 0x94, 0x21, 0x08};
// 沙
static const unsigned char sha[] = {
    0x00, 0x40, 0x20, 0x40, 0x10, 0x40, 0x11, 0x48, 0x81, 0x44, 0x42, 0x42, 0x42, 0x42, 0x14, 0x48, 
    0x10, 0x48, 0x20, 0x48, 0xe0, 0x10, 0x20, 0x10, 0x20, 0x20, 0x20, 0x40, 0x21, 0x80, 0x06, 0x00};

// 页面上要显示的信息
// 23:13       晴    3℃
// 1月18日  80%  5m/56°
String currentDate = "2022-01-18";
String currentTime = "23:41:58";
int weatherCode = -1;
int humidity = 0;
int temperature = 0;
int windSpeed = 0;
int wind360 = 0;
int count = -1;

void setup()
{
    Serial.begin(9600);

    // 显示器连接
    if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS))
    {
        Serial.println(F("SSD1306 allocation failed"));
        for (;;)
            ;
    }
    delay(2000);
    printMessage("Display initialed!");
    delay(2000);

    // 打印欢迎信息
    printMessage("Weaher clock by Yuki!");

    // 连接WiFi
    connectWifi();

    // 时间设置
    timeClient.begin();
    timeClient.setTimeOffset(28800);
}

void loop()
{
    count++;
    Serial.print("count now is: ");
    Serial.println(count);
    if (count % 900 == 0) {
        count = 0;
        requestWeather();
        delay(10000);
    }
    // 更新时间的值
    updateTime();
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    // 当前时间
    display.setCursor(5, 5);
    display.print(currentTime);
    // 当前日期
    display.setCursor(65, 5);
    display.print(currentDate);

    // 分割线
    display.drawLine(0, 15, 128, 15, WHITE);

    // 气温值
    display.setCursor(5, 35);
    display.setTextSize(2);
    display.print(temperature);
    display.drawBitmap(43, 33, degree, 16, 16, 1);

    // 天气描述
    if (weatherCode == 0 || weatherCode == 1 || weatherCode == 2 || weatherCode == 3)
    {
        display.drawBitmap(64, 25, qing, 16, 16, 1);
    }
    else if (weatherCode == 4)
    {
        display.drawBitmap(64, 25, duo, 16, 16, 1);
        display.drawBitmap(80, 25, yun, 16, 16, 1);
    }
    else if (weatherCode == 5 || weatherCode == 6)
    {
        display.drawBitmap(64, 25, qing, 16, 16, 1);
        display.drawBitmap(80, 25, jian, 16, 16, 1);
        display.drawBitmap(96, 25, duo, 16, 16, 1);
        display.drawBitmap(112, 25, yun, 16, 16, 1);
    }
    else if (weatherCode == 7 || weatherCode == 8)
    {
        display.drawBitmap(64, 25, da, 16, 16, 1);
        display.drawBitmap(80, 25, bu, 16, 16, 1);
        display.drawBitmap(96, 25, duo, 16, 16, 1);
        display.drawBitmap(112, 25, yun, 16, 16, 1);
    }
    else if (weatherCode == 9)
    {
        display.drawBitmap(64, 25, yin, 16, 16, 1);
    }
    else if (weatherCode == 10)
    {
        display.drawBitmap(64, 25, zhen, 16, 16, 1);
        display.drawBitmap(80, 25, yu, 16, 16, 1);
    }
    else if (weatherCode == 11)
    {
        display.drawBitmap(64, 25, lei, 16, 16, 1);
        display.drawBitmap(80, 25, zhen, 16, 16, 1);
        display.drawBitmap(96, 25, yu, 16, 16, 1);
    }
    else if (weatherCode == 12)
    {
        display.drawBitmap(64, 25, lei, 16, 16, 1);
        display.drawBitmap(80, 25, yu, 16, 16, 1);
        display.drawBitmap(96, 25, bing, 16, 16, 1);
        display.drawBitmap(112, 25, bao, 16, 16, 1);
    }
    else if (weatherCode == 13)
    {
        display.drawBitmap(64, 25, xiao, 16, 16, 1);
        display.drawBitmap(80, 25, yu, 16, 16, 1);
    }
    else if (weatherCode == 14)
    {
        display.drawBitmap(64, 25, zhong, 16, 16, 1);
        display.drawBitmap(80, 25, yu, 16, 16, 1);
    }
    else if (weatherCode == 15)
    {
        display.drawBitmap(64, 25, da, 16, 16, 1);
        display.drawBitmap(80, 25, yu, 16, 16, 1);
    }
    else if (weatherCode == 16)
    {
        display.drawBitmap(64, 25, bao1, 16, 16, 1);
        display.drawBitmap(80, 25, yu, 16, 16, 1);
    }
    else if (weatherCode == 17)
    {
        display.drawBitmap(64, 25, da, 16, 16, 1);
        display.drawBitmap(80, 25, bao1, 16, 16, 1);
        display.drawBitmap(96, 25, yu, 16, 16, 1);
    }
    else if (weatherCode == 18)
    {
        display.drawBitmap(64, 25, te, 16, 16, 1);
        display.drawBitmap(80, 25, da, 16, 16, 1);
        display.drawBitmap(96, 25, bao1, 16, 16, 1);
        display.drawBitmap(112, 25, yu, 16, 16, 1);
    }
    else if (weatherCode == 19)
    {
        display.drawBitmap(64, 25, dong, 16, 16, 1);
        display.drawBitmap(80, 25, yu, 16, 16, 1);
    }
    else if (weatherCode == 20)
    {
        display.drawBitmap(64, 25, yu, 16, 16, 1);
        display.drawBitmap(80, 25, jia, 16, 16, 1);
        display.drawBitmap(96, 25, xue, 16, 16, 1);
    }
    else if (weatherCode == 21)
    {
        display.drawBitmap(64, 25, zhen, 16, 16, 1);
        display.drawBitmap(80, 25, xue, 16, 16, 1);
    }
    else if (weatherCode == 22)
    {
        display.drawBitmap(64, 25, xiao, 16, 16, 1);
        display.drawBitmap(80, 25, xue, 16, 16, 1);
    }
    else if (weatherCode == 23)
    {
        display.drawBitmap(64, 25, zhong, 16, 16, 1);
        display.drawBitmap(80, 25, xue, 16, 16, 1);
    }
    else if (weatherCode == 24)
    {
        display.drawBitmap(64, 25, da, 16, 16, 1);
        display.drawBitmap(80, 25, xue, 16, 16, 1);
    }
    else if (weatherCode == 25)
    {
        display.drawBitmap(64, 25, bao1, 16, 16, 1);
        display.drawBitmap(80, 25, xue, 16, 16, 1);
    }
    else if (weatherCode == 26)
    {
        display.drawBitmap(64, 25, fu, 16, 16, 1);
        display.drawBitmap(80, 25, chen, 16, 16, 1);
    }
    else if (weatherCode == 27)
    {
        display.drawBitmap(64, 25, yang, 16, 16, 1);
        display.drawBitmap(80, 25, sha, 16, 16, 1);
    }
    else if (weatherCode == 28)
    {
        display.drawBitmap(64, 25, sha, 16, 16, 1);
        display.drawBitmap(80, 25, chen, 16, 16, 1);
        display.drawBitmap(96, 25, bao1, 16, 16, 1);
    }
    else if (weatherCode == 29)
    {
        display.drawBitmap(64, 25, qiang, 16, 16, 1);
        display.drawBitmap(80, 25, sha, 16, 16, 1);
        display.drawBitmap(96, 25, chen, 16, 16, 1);
        display.drawBitmap(112, 25, bao1, 16, 16, 1);
    }
    else if (weatherCode == 30)
    {
        display.drawBitmap(64, 25, wu, 16, 16, 1);
    }
    else if (weatherCode == 31)
    {
        display.drawBitmap(64, 25, mai, 16, 16, 1);
    }
    else if (weatherCode == 32)
    {
        display.drawBitmap(64, 25, feng, 16, 16, 1);
    }
    else if (weatherCode == 33)
    {
        display.drawBitmap(64, 25, da, 16, 16, 1);
        display.drawBitmap(80, 25, feng, 16, 16, 1);
    }
    else if (weatherCode == 34)
    {
        display.drawBitmap(64, 25, ju, 16, 16, 1);
        display.drawBitmap(80, 25, feng, 16, 16, 1);
    }
    else if (weatherCode == 35)
    {
        display.drawBitmap(64, 25, re, 16, 16, 1);
        display.drawBitmap(80, 25, dai, 16, 16, 1);
        display.drawBitmap(96, 25, feng, 16, 16, 1);
        display.drawBitmap(112, 25, bao1, 16, 16, 1);
    }
    else if (weatherCode == 36)
    {
        display.drawBitmap(64, 25, long1, 16, 16, 1);
        display.drawBitmap(80, 25, juan, 16, 16, 1);
        display.drawBitmap(96, 25, feng, 16, 16, 1);
    }
    else if (weatherCode == 37)
    {
        display.drawBitmap(64, 25, leng, 16, 16, 1);
    }
    else if (weatherCode == 38)
    {
        display.drawBitmap(64, 25, re, 16, 16, 1);
    }
    else
    {
        display.drawBitmap(64, 25, wei, 16, 16, 1);
        display.drawBitmap(80, 25, zhi, 16, 16, 1);
    }

    // 风速 风向
    display.setCursor(64, 53);
    display.setTextSize(1);
    display.print(windSpeed);
    display.setCursor(76, 53);
    display.print("/");
    display.setCursor(83, 53);
    display.print(wind360);

    // 湿度
    display.setCursor(106, 53);
    display.print(humidity);
    display.print("%");

    display.display();
    delay(990);
}

void connectWifi()
{
    printMessage("Connecting to WiFi..");
    // WiFiManager wifiManager;
    // wifiManager.autoConnect("AutoConnectAP", "12345678");
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED)
    {
        delay(500);
        Serial.print(".");
    }
    printMessage("Connect successfully!");
    Serial.print("IP address:    ");
    Serial.println(WiFi.localIP());
}

void updateTime()
{
    timeClient.update();
    currentTime = timeClient.getFormattedTime();
}

void printMessage(char *message)
{
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0, 25);
    display.println(message);
    display.display();
    delay(2000);
}

void requestWeather()
{
    Serial.print(count);
    Serial.println(" start request weather now..");
    String reqRes = "/v3/weather/now.json?language=zh-Hans&unit=c&key=" +
                    weatherAPIKey + "&location=" + weatherLocation;
    String request = String("GET ") + reqRes + " HTTP/1.1\r\n" +
                     "Host: " + weatherAPIHost + "\r\n" +
                     "Connection: close\r\n\r\n";
    Serial.println("");
    Serial.print("Connecting to ");
    Serial.println(weatherAPIHost);

    // 尝试连接服务器
    if (wifiClient.connect("api.seniverse.com", 80))
    {
        Serial.println("success!");

        // 向服务器发送http请求信息
        wifiClient.print(request);
        Serial.println("Sending request: ");
        Serial.println(request);

        // 获取并显示服务器响应状态行
        String statusResponse = wifiClient.readStringUntil('\n');
        Serial.print("statusResponse: ");
        Serial.println(statusResponse);

        // 使用find跳过HTTP响应头
        if (wifiClient.find("\r\n\r\n"))
        {
            Serial.println("Found Header End. Start Parsing.");
        }

        // 接口返回信息确认
        String responsePayload = wifiClient.readString();
        Serial.println("Server Response Payload: ");
        Serial.println(responsePayload);

        parseInfo(responsePayload);
    }
    else
    {
        Serial.println(" connection failed!");
    }
    //断开客户端与服务器连接工作
    wifiClient.stop();
}

void parseInfo(String jsonString)
{
    DynamicJsonDocument doc(1024);
    deserializeJson(doc, jsonString);
    JsonObject results_0 = doc["results"][0];
    JsonObject results_0_now = results_0["now"];

    // 更新天气情况相关的变量
    weatherCode = results_0_now["code"].as<int>();
    temperature = results_0_now["temperature"].as<int>();
    humidity = results_0_now["humidity"].as<int>();
    wind360 = results_0_now["wind_direction_degree"].as<int>();
    windSpeed = results_0_now["wind_speed"].as<int>();
    String currentDateStr = results_0["last_update"].as<String>();
    currentDate = currentDateStr.substring(0, 10);

    Serial.println(F("======Weahter Now======="));
    Serial.print(F("Weather Now: "));
    Serial.print(weatherCode);
    Serial.print(F("Temperature: "));
    Serial.println(temperature);
    Serial.print(F("Humidity: "));
    Serial.println(humidity);
    Serial.print(F("Wind Speed: "));
    Serial.println(windSpeed);
    Serial.print(F("Wind Direction: "));
    Serial.println(wind360);
    Serial.print(F("Last Update: "));
    Serial.println(currentDate);
    Serial.println(F("========================"));
}
